$children$kml
install.packages("trajectories")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotXML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotXML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
library("mgcv", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Documents/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/data/track1.kml", getDTD=FALSE)
km
```{r}
xmlSize (r)
sapply (xmlChildren (r [[1]]), xmlName)
```{r Visualisation, message=FALSE}
pkgs <- c ("plotKML", "sp")
junk <- lapply (pkgs, require, character.only=TRUE)
coordinates (kmldat) <- ~x+y
proj4string (kmldat) <- CRS("+proj=longlat +datum=WGS84")
```
```{r eval=FALSE}
plotKML.env (silent=FALSE, kmz=FALSE) # see plotKML help for details
plotKML (kmldat ["z"])
```
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("rJava")
install.packages("OpenStreetMap")
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("rJava")
require (rJava)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (rJava)
```{r}
stcube <- function (x, xlab = "x", ylab = "y", zlab = "t", type = "l", aspect, xlim,
ylim, zlim, showMap = FALSE, mapType = "osm", ..., y, z) {
# "y" and "z" are ignored, but included in the method signature to avoid
# passing them twice to plot3d().
require(rgl)
require(OpenStreetMap)
coords = coordinates(x@sp)
time = index(x@time)
if(missing(aspect))
aspect = if((asp = mapasp(x@sp)) == "iso") "iso" else c(1, asp, 1)
if(missing(xlim))
xlim = range(coords[, 1])
if(missing(ylim))
ylim = range(coords[, 2])
if(missing(zlim))
zlim = range(time)
# If the basemap is to be shown, fetch map tile first to allow for
# rendering everything in one go.
if(showMap) {
# Required by openmap().
require(raster)
map = openmap(upperLeft = c(ylim[2], xlim[1]),
lowerRight = c(ylim[1], xlim[2]), type = mapType)
map = openproj(x = map, projection = proj4string(x))
}
plot3d(x = coords[, 1], y = coords[, 2], z = time, xlab = xlab,
ylab = ylab, zlab = zlab, type = type, aspect = aspect, xlim = xlim,
ylim = ylim, zlim = zlim, ...)
if(showMap) map3d(map = map, z = time[1])
}
stcube (kmst, showmap=FALSE)
```
stcube (kmst, showmap=FALSE)
require (spacetime)
dat <- data.frame (arima.sim (n=npts, list(ar=c(0.75,0.2), sd=1)))
plot (dat)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.zip", repos = NULL)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.zip", repos = NULL)
require (rJava)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6 (1).zip", repos = NULL)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6 (1).zip", repos = NULL)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (rJava)
install.packages("knitr")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava", "rgl")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.1")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.7.0_51')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava", "rgl")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Documents/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/data/track1.kml", getDTD=FALSE)
km
r <- xmlRoot (km)
xmlSize (r)
r
sapply (xmlChildren (r [[1]]), xmlName)
sapply (xmlChildren (r [[1]]), xmlAttrs)
sapply (xmlChildren (r [[1]]), xmlSize)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
r [[1]]
r [[1]] [[7]]
sapply(xmlChildren (r [[7]], xmlName)
sapply(xmlChildren (r [[7]], xmlName))
r [[1]] [[7]]
sapply(xmlChildren (r [[7]], xmlName))
sapply(xmlChildren (r [[1]] [[7]], xmlName))
r [[1]] [[7]]
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) ([[7]]), xmlName)
sapply(xmlChildren (r [[1]]) [7], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
sapply(xmlChildren (r [[1]]) [[2]], xmlName)
sapply(xmlChildren (r [[1]]) [7], xmlName)
sapply(xmlChildren (r [[1]]) [2], xmlName)
sapply(xmlChildren (r [[1]]) [7[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
?xmlChildren
r [[1]] [[7]]
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
(r [[1]] [[7]])
sapply (xmlChildren (r [[1]]), xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]]) [[1]], xmlSize)
sapply (xmlChildren (r [[1]]) [[2]], xmlSize)
sapply (xmlChildren (r [[1]]) [[6]], xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
r[[1]]
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]]), xmlSize)
sapply(xmlChildren (r [[1]] [[7]], xmlName)
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply (xmlChildren (r [[1]]), xmlName)
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply (xmlChildren (r [[1]]), xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]] [[7]], xmlSize))
sapply (xmlChildren (r [[1]] [[7]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlAttrs)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[2]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[1]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlAttrs)
xmlValue(xmlCHildren(r [[1]] [[7]] [[7]] [[1]]))
xmlValue(xmlChildren(r [[1]] [[7]] [[7]] [[1]]))
(r [[1]] [[7]] [[7]] [[1]])
ob <- (r [[1]] [[7]] [[7]] [[1]])
xmlValue(ob)
encoding = getEncoding(x), trim = FALSE))
ob <- (r [[1]] [[7]] [[7]] [[1]])
node <- xmlNode("foo", "Some text")
xmlValue(node)
ob <- (r [[1]] [[7]] [[7]] [[1]])
xmlValue(ob, ignoreComments = FALSE, recursive = TRUE, trim = FALSE)
xmlValue(ob, ignoreComments = TRUE, recursive = TRUE, trim = FALSE)
xmlValue(ob, ignoreComments = TRUE, recursive = TRUE, trim = FALSE)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlValue)
ob
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[2]]), xmlValue)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlValue)
child <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
sapply (child, xmlValue)
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
sapply (child, xmlValue)
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
values <- sapply (coordinates, xmlValue)
values
values[1]
values[2]
class(values)
?strsplit
strsplit(values,2)
strsplit(values,"[\n]")
## Coordinates
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
values <- sapply (coordinates, xmlValue)
coords <- strsplit(values,"[\n]")
coords
coords[1]
coords[]
coords[[1]]
install.packages("trajectories")
?arima.sim
model1 <- arima.sim(n=500, list(ar=c(0.8)))
model2 <- arima.sim(n=500, list(ar=c(-0.8)))
model1 <- arima.sim(n=500, list(ar=c(0.8)))
# Straightforward trough the lecture slides
N = length(model1)
I = abs(fft(model1)/sqrt(N))^2
# Scale periodogram
P = (4/N)*I
f = (0:floor(N/2))/N
plot(f, I[1:((N/2)+1)], type="o", xlab="frequency",
ylab="")
?spec.gram
??spec.gram
spec.gram(model1)
specgram(model1)
install.packages("signal")
require(signal)
specgram(model1)
plot(specgram(model1))
plot(specgram(model1))
plot(specgram(model1), type="p")
specgram(model2)
specgram(x = 1:500, y = model1)
specgram(chirp(seq(-2, 15, by = 0.001), 400, 10, 100, 'quadratic'))
specgram(model2, n = 500)
# Straightforward trough the lecture slides
N = length(model1)
I = abs(fft(model1)/sqrt(N))^2
# Scale periodogram
P = (4/N)*I
f = (0:floor(N/2))/N
plot(f, I[1:((N/2)+1)], type="o", xlab="frequency",
ylab="")
specgram(x = 500, n = model1)
specgram(x = model1, n = 500)
install.packages("fuzzyMM")
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
require(rJava)
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require(fuzzyMM)
install.packages("devtools")
require(devtools)
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv")
require(slidify)
pkgs <- c("enviroCaR")
devtools::install_github(pkgs, "enviroCar")
require(enviroCaR)
?spectrum
spectrum(rw1)
rw1 <- cumsum(rnorm(100))
rw2 <- cumsum(rnorm(1000))
rw3 <- cumsum(rnorm(10000))
spectrum(rw1)
spectrum(rw2)
spectrum(rw3)
wn1 <- rnorm(n=100)
wn2 <- rnorm(n=1000)
wn3 <- rnorm(n=10000)
spectrum(wn1)
spectrum(wn2)
spectrum(wn3)
?spectrum
?plot
require(OpenStreetMap)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require(OpenStreetMap)
require(rgl)
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
R CMD INSTALL [-l "C:\Users\Simon\Desktop\Map3d_1.0-tar.gz"]
R CMD INSTALL ["C:\Users\Simon\Desktop\Map3d_1.0-tar.gz"]
R CMD INSTALL "C:\Users\Simon\Desktop\Map3d_1.0-tar.gz"
install.packages("C:\Users\Simon\Desktop\Map3d_1.0-tar.gz")
install.packages("C:/Users/Simon/Desktop/Map3d_1.0-tar.gz")
require(map3d)
require(Map3d)
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
require(map3d)
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
install.packages("C:\Users\Simon\Desktop\map3d_1.0-tar.gz")
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava')
require('rJava')
require(OpenStreetMap)
require(rgl)
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
install.packages('rJava')
install.packages("rJava")
require(rJava)
require(OpenStreetMap)
require(rgl)
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
install.packages("rJava")
require(rJava)
require(OpenStreetMap)
require(rgl)
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
install.packages("C:/Users/Simon/Desktop/map3d_1.0-tar.gz")
install.packages("C:/Users/Simon/Desktop/map3d_1.0.tar.gz", repos = NULL, type = "source")
Sys.getenv("JAVA_HOME")
require(map3d)
require(enviroCaR)
require(fuzzyMM)
require(map3d)
require(rgl)
require(knitr)
require(spacetime)
?importSingleTrack
require(enviroCaR)
require(fuzzyMM)
require(map3d)
require(rgl)
require(knitr)
require(spacetime)
tracks <- importSingleTrack("https://envirocar.org/api/stable", "52af4fd3e4b0593cce13bfc7")
ids <- getTrackIDs("https://envirocar.org/api/stable", bbox(tracks))
trcol <- importEnviroCar("https://envirocar.org/api/stable", ids[4:6])
stplot(trcol, scales = list(draw=TRUE))
stplot(trcol, attr = "speed", lwd = 3, by = "IDs")
agg_track <- aggregateTrack(tracks, phen="CO2", interval=26)
str(agg_track)
track <- tracks[1]
gen_track <- generalize(track, distance = 500)
str(gen_track)
par(bg = "white")
data <- track@data
track_sp <- track@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
par(bg = "white")
drn <- create_drn(bbox(track_sp))
plot(coordinates(track_sp)[1:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:20,], col="red", pch=16)
par3d("zoom" = 0.35)
spplot3d(track@sp, radius = 1, open3d = FALSE, type="skobbler")
par3d("zoom" = 0.35)
spplot3d(track_sp, att="GPS.Speed", radius = 1, open3d = FALSE, type="skobbler")
?summary
plot(coordinates(track), type="l")
points(agg_track@sp, col="red")
lines(coordinates(track@sp),col="red")
plot(coordinates(track), type="l")
points(agg_track@sp, col="red")
lines(coordinates(agg_track@sp),col="red")
spplot3d(track_sp, att="GPS.Speed", radius = 1, open3d = FALSE, type="skobbler")
require(trajectories)
require(spacetime)
require(maptools)
require(OpenStreetMap)
require(ggplot2)
require (rgdal)
require (maptools)
require(plotKML)
require(map3d)
## Holger's Cycle Tracks
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%SZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
tr <- as (stidf, "Track")
Track(tr)
}
ddir <- "dat/gpx-tracks/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
files
rides1 <- list ()
for (f in files) {
cat (f, "\n")
rides1 <- c (rides1, getTr (f))
}
holger <- TracksCollection (list (rides1=Tracks (rides1)))
s1 <- sort(holger@tracksCollection$rides1@tracks$Track1$speed)
c(s1[(length(s1)-5):length(s1)])
s2 <- sort(holger@tracksCollection$rides1@tracks$Track2$speed)
c(s2[(length(s2)-5):length(s2)])
s3 <- sort(holger@tracksCollection$rides1@tracks$Track3$speed)
c(s3[(length(s3)-5):length(s3)])
s4 <- sort(holger@tracksCollection$rides1@tracks$Track4$speed)
c(s4[(length(s4)-5):length(s4)])
s5 <- sort(holger@tracksCollection$rides1@tracks$Track5$speed)
c(s5[(length(s5)-5):length(s5)])
s6 <- sort(holger@tracksCollection$rides1@tracks$Track6$speed)
c(s6[(length(s6)-5):length(s6)])
setwd("~/GitHub/Trajectories")
h1data <- holger@tracksCollection$rides1@tracks$Track1
h2data <- holger@tracksCollection$rides1@tracks$Track2
h3data <- holger@tracksCollection$rides1@tracks$Track3
require(trajectories)
require(spacetime)
require(OpenStreetMap)
require(ggplot2)
require(plotKML)
require(map3d)
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%SZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
tr <- as (stidf, "Track")
Track(tr)
}
ddir <- "dat/gpx-tracks/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
rides1 <- list ()
for (f in files) {
cat (f, "\n")
rides1 <- c (rides1, getTr (f))
}
holger <- TracksCollection (list (rides1=Tracks (rides1)))
h1data <- holger@tracksCollection$rides1@tracks$Track1
h2data <- holger@tracksCollection$rides1@tracks$Track2
h3data <- holger@tracksCollection$rides1@tracks$Track3
h4data <- holger@tracksCollection$rides1@tracks$Track4
h5data <- holger@tracksCollection$rides1@tracks$Track5
h6data <- holger@tracksCollection$rides1@tracks$Track6
class(h1data)
class(h1data$speed)
h1 <- sort(h1data$speed)
h1_5 <- c(h1[(length(h1)-5):length(h1)])
h1_5
c(h1data$speed, h2data$speed)
sort(c(h1data$speed, h2data$speed, h3data$speed, h4data$speed, h5data$speed, h6data$speed))
h_10 <- c(h[(length(h)-5):length(h)])
h <- sort(c(h1data$speed, h2data$speed, h3data$speed, h4data$speed, h5data$speed, h6data$speed))
h_10 <- c(h[(length(h)-5):length(h)])
h_10
h_10 <- c(h[(length(h)-10):length(h)])
h <- sort(c(h1data$speed, h2data$speed, h3data$speed, h4data$speed, h5data$speed, h6data$speed))
h_10 <- c(h[(length(h)-10):length(h)])
h_10
m <- sort(c(m1data$speed, m2data$speed, m3data$speed))
m1data <- mark@tracksCollection$rides2@tracks$Track1
m2data <- mark@tracksCollection$rides2@tracks$Track2
m3data <- mark@tracksCollection$rides2@tracks$Track3
## Mark's Cycle Tracks
getMTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%OSZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
tr <- as (stidf, "Track")
Track(tr)
}
ddir <- "dat/gpx-tracks-mp/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
rides2 <- list ()
for (f in files) {
cat (f, "\n")
rides2 <- c (rides2, getMTr (f))
}
mark <- TracksCollection (list (rides2=Tracks (rides2)))
m1data <- mark@tracksCollection$rides2@tracks$Track1
m2data <- mark@tracksCollection$rides2@tracks$Track2
m3data <- mark@tracksCollection$rides2@tracks$Track3
m <- sort(c(m1data$speed, m2data$speed, m3data$speed))
m_10 <- c(m[(lenght(m)-10):length(m)])
m10
m <- sort(c(m1data$speed, m2data$speed, m3data$speed))
m_10 <- c(m[(length(m)-10):length(m)])
m10
m <- sort(c(m1data$speed, m2data$speed, m3data$speed))
m_10 <- c(m[(length(m)-10):length(m)])
m_10
p <- SpatialPointsDataFrame(h5data@sp, h5conn)
a <-as.character(h5data@data$tr.ele)
h5conn <- h5data@connections
h5conn <- rbind(h5conn, c(0, 0, 0, 0))
h5speed <- h5conn$speed
h5elevation <- as.vector(h5data@data$tr.ele)
p <- SpatialPointsDataFrame(h5data@sp, h5conn)
a <-as.character(h5data@data$tr.ele)
b <- as.numeric(a)
spplot3d(p, att="speed", radius = 0.2, height=b/50, open3d = FALSE, type="skobbler", col=c("green", "red"))
h4conn <- h4data@connections
h4conn <- rbind(h4conn, c(0, 0, 0, 0))
p <- SpatialPointsDataFrame(h4data@sp, h4conn)
a <-as.character(h4data@data$tr.ele)
b <- as.numeric(a)
spplot3d(p, att="speed", radius = 0.2, height=b/50, open3d = FALSE, type="skobbler", col=c("green", "red"))
p <- SpatialPointsDataFrame(h4data@sp, h4conn)
a <-as.character(h4data@data$tr.ele)
b <- as.numeric(a)
spplot3d(p, att="speed", radius = 0.2, height=b/50, open3d = FALSE, type="skobbler", col=c("green", "red"))
