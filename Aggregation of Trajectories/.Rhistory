# Anzahl Nullen
summe <- sum(kante == 0);
vec4 <- c(vec4,summe);
}
# Vektor mit Zeilen
z <- c(1:end);
# Matrix mit Zeilen/Anzahl Nullen
mtx <- matrix(c(z,vec4),end);
# Plot
plot(mtx, type="l", xlab="Zeile", ylab="Anzahl Nullen", col="blue4");
}
}
)
r <- raster("C:/Daten/Landsat 7/Day/Streifen (Wasser)/LE70230292003196EDC01.jpg")
stripes(r)
r
r <- raster("C:/Daten/Landsat 7/Day/Streifen (Wasser)/LE70230292003196EDC01.jpg")
r
summary(r)
install.packages("C:/Users/Simon/Desktop/fuzzyMM_1.0.tar.gz", repos = NULL, type = "source")
install.packages("osmar")
install.packages("frbs")
install.packages("igraph")
library(fuzzyMM)
library(SenErrDet)
install.packages("C:/Users/Simon/Desktop/fuzzyMM_1.0.tar.gz", repos = NULL, type = "source")
library(fuzzyMM)
demo("MapMatching")
install.packages("rjson")
install.packages("stringr")
demo("MapMatching")
vignette("fuzzyMM")
library("knitr", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("knitr")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "XML")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "XML")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
install.packages(new.pkgs)
install.packages(new.pkgs)
install.packages(new.pkgs)
install.packages("sp")
require (XML)
km <- xmlTreeParse ("../data/track1.kml", getDTD=FALSE)
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Desktop/R/data/track1.kml", getDTD=FALSE)
km
library(sp)
require(OpenStreetMap)
install.packages("OpenStreetMap")
install.packages("raster")
install.packages("knitr")
--------------
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Desktop/R/data/track1.kml", getDTD=FALSE)
km
$children$kml
$children$kml
install.packages("trajectories")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotXML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotXML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
library("mgcv", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Documents/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/data/track1.kml", getDTD=FALSE)
km
```{r}
xmlSize (r)
sapply (xmlChildren (r [[1]]), xmlName)
```{r Visualisation, message=FALSE}
pkgs <- c ("plotKML", "sp")
junk <- lapply (pkgs, require, character.only=TRUE)
coordinates (kmldat) <- ~x+y
proj4string (kmldat) <- CRS("+proj=longlat +datum=WGS84")
```
```{r eval=FALSE}
plotKML.env (silent=FALSE, kmz=FALSE) # see plotKML help for details
plotKML (kmldat ["z"])
```
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("rJava")
install.packages("OpenStreetMap")
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("rJava")
require (rJava)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (rJava)
```{r}
stcube <- function (x, xlab = "x", ylab = "y", zlab = "t", type = "l", aspect, xlim,
ylim, zlim, showMap = FALSE, mapType = "osm", ..., y, z) {
# "y" and "z" are ignored, but included in the method signature to avoid
# passing them twice to plot3d().
require(rgl)
require(OpenStreetMap)
coords = coordinates(x@sp)
time = index(x@time)
if(missing(aspect))
aspect = if((asp = mapasp(x@sp)) == "iso") "iso" else c(1, asp, 1)
if(missing(xlim))
xlim = range(coords[, 1])
if(missing(ylim))
ylim = range(coords[, 2])
if(missing(zlim))
zlim = range(time)
# If the basemap is to be shown, fetch map tile first to allow for
# rendering everything in one go.
if(showMap) {
# Required by openmap().
require(raster)
map = openmap(upperLeft = c(ylim[2], xlim[1]),
lowerRight = c(ylim[1], xlim[2]), type = mapType)
map = openproj(x = map, projection = proj4string(x))
}
plot3d(x = coords[, 1], y = coords[, 2], z = time, xlab = xlab,
ylab = ylab, zlab = zlab, type = type, aspect = aspect, xlim = xlim,
ylim = ylim, zlim = zlim, ...)
if(showMap) map3d(map = map, z = time[1])
}
stcube (kmst, showmap=FALSE)
```
stcube (kmst, showmap=FALSE)
require (spacetime)
dat <- data.frame (arima.sim (n=npts, list(ar=c(0.75,0.2), sd=1)))
plot (dat)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.zip", repos = NULL)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6.zip", repos = NULL)
require (rJava)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6 (1).zip", repos = NULL)
install.packages("C:/Users/Simon/Desktop/rJava_0.9-6 (1).zip", repos = NULL)
library("rJava", lib.loc="C:/Users/Simon/Documents/R/win-library/3.0")
require (rJava)
install.packages("knitr")
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava", "rgl")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
library("OpenStreetMap", lib.loc="C:/Users/Simon/Documents/R/win-library/3.1")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.7.0_51')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
pkgs <- c ("knitr", "rmarkdown", "yaml", "bitops", "trajectories", "plotKML", "XML", "sp", "maptools", "rgdal", "OpenStreetMap", "graphics", "grDevices", "utils", "mgcv", "rJava", "rgl")
new.pkgs <- pkgs [!(pkgs %in% rownames (installed.packages()))]
if(length(new.pkgs)) install.packages(new.pkgs)
require (XML)
km <- xmlTreeParse ("C:/Users/Simon/Documents/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/data/track1.kml", getDTD=FALSE)
km
r <- xmlRoot (km)
xmlSize (r)
r
sapply (xmlChildren (r [[1]]), xmlName)
sapply (xmlChildren (r [[1]]), xmlAttrs)
sapply (xmlChildren (r [[1]]), xmlSize)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
r [[1]]
r [[1]] [[7]]
sapply(xmlChildren (r [[7]], xmlName)
sapply(xmlChildren (r [[7]], xmlName))
r [[1]] [[7]]
sapply(xmlChildren (r [[7]], xmlName))
sapply(xmlChildren (r [[1]] [[7]], xmlName))
r [[1]] [[7]]
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]]) ([[7]]), xmlName)
sapply(xmlChildren (r [[1]]) [7], xmlName)
sapply(xmlChildren (r [[1]]) [[6]], xmlName)
sapply(xmlChildren (r [[1]]) [[2]], xmlName)
sapply(xmlChildren (r [[1]]) [7], xmlName)
sapply(xmlChildren (r [[1]]) [2], xmlName)
sapply(xmlChildren (r [[1]]) [7[7]], xmlName)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
?xmlChildren
r [[1]] [[7]]
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
(r [[1]] [[7]])
sapply (xmlChildren (r [[1]]), xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]]) [[1]], xmlSize)
sapply (xmlChildren (r [[1]]) [[2]], xmlSize)
sapply (xmlChildren (r [[1]]) [[6]], xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply(xmlChildren (r [[1]]) [[7]], xmlName)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply(xmlChildren (r [[1]] [[7]]), xmlName)
r[[1]]
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]]), xmlSize)
sapply(xmlChildren (r [[1]] [[7]], xmlName)
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply (xmlChildren (r [[1]]), xmlName)
sapply(xmlChildren (r [[1]] [[7]], xmlName))
sapply (xmlChildren (r [[1]]), xmlSize)
sapply (xmlChildren (r [[1]]) [[7]], xmlSize)
sapply (xmlChildren (r [[1]] [[7]], xmlSize))
sapply (xmlChildren (r [[1]] [[7]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlSize)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlAttrs)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[2]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[1]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlName)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlAttrs)
xmlValue(xmlCHildren(r [[1]] [[7]] [[7]] [[1]]))
xmlValue(xmlChildren(r [[1]] [[7]] [[7]] [[1]]))
(r [[1]] [[7]] [[7]] [[1]])
ob <- (r [[1]] [[7]] [[7]] [[1]])
xmlValue(ob)
encoding = getEncoding(x), trim = FALSE))
ob <- (r [[1]] [[7]] [[7]] [[1]])
node <- xmlNode("foo", "Some text")
xmlValue(node)
ob <- (r [[1]] [[7]] [[7]] [[1]])
xmlValue(ob, ignoreComments = FALSE, recursive = TRUE, trim = FALSE)
xmlValue(ob, ignoreComments = TRUE, recursive = TRUE, trim = FALSE)
xmlValue(ob, ignoreComments = TRUE, recursive = TRUE, trim = FALSE)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]]), xmlValue)
ob
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[2]]), xmlValue)
sapply (xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]]), xmlValue)
child <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
sapply (child, xmlValue)
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
sapply (child, xmlValue)
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
values <- sapply (coordinates, xmlValue)
values
values[1]
values[2]
class(values)
?strsplit
strsplit(values,2)
strsplit(values,"[\n]")
## Coordinates
coordinates <- xmlChildren (r [[1]] [[7]] [[7]] [[1]] [[3]])
values <- sapply (coordinates, xmlValue)
coords <- strsplit(values,"[\n]")
coords
coords[1]
coords[]
coords[[1]]
install.packages("trajectories")
setwd("~/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/02")
setwd("~/GitHub/Trajectories/Aggregation of Trajectories")
require(trajectories)
require(spacetime)
require(maptools)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require(OpenStreetMap)
require(ggplot2)
require (rgdal)
require (maptools)
require(plotKML)
## Holger's Cycle Tracks
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%SZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
as (stidf, "Track")
}
ddir <- "dat/gpx-tracks/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
runs <- rides1 <- list ()
for (f in files) {
cat (f, "\n")
tr <- getTr (f)
if (length (grep ("Running", f)) > 0)
{
runs <- c (runs, tr)
}
else
{
rides1 <- c (rides1, tr)
}
}
holger <- TracksCollection(list(rides1=Tracks(rides1)))
plot(holger, col="red")
## Mark's Cycle Tracks
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%OSZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
as (stidf, "Track")
}
ddir <- "dat/gpx-tracks-mp/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
rides2 <- list ()
for (f in files) {
cat (f, "\n")
rides2 <- c (rides2, getTr (f))
}
mark <- TracksCollection (list (rides2=Tracks (rides2)))
plot (mark, col="blue", lwd=1)
holger@tracksCollection$rides1@tracks
holger@tracksCollection$rides1@tracks[1]@sp
holger@tracksCollection$rides1@tracks$Track1@data$tr.ele
holger@tracksCollection$rides1@tracks$Track2data$tr.ele
holger@tracksCollection$rides1@tracks$Track2@data$tr.ele
holger@tracksCollection$rides1@tracks$Track3@data$tr.ele
holger@tracksCollection$rides1@tracks$Track4@data$tr.ele
setwd("~/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/02")
plot(holger@tracksCollection$rides1@tracks$Track1)
plot(holger@tracksCollection$rides1@tracks)
plot(holger@tracksCollection$rides1@tracks$Track1@sp)
a <- holger@tracksCollection$rides1@tracks$Track1@data$tr.ele
mean(a)
class(a)
as.list(a)
as.factor(a)
max(a)
summary(holger@tracksCollection$rides1@tracks$Track1)
summary(holger@tracksCollection$rides1@tracks$Track2)
plot(holger@tracksCollection$rides1@tracks$Track2)
plot(holger@tracksCollection$rides1@tracks$Track3)
plot(holger@tracksCollection$rides1@tracks$Track4)
plot(holger@tracksCollection$rides1@tracks$Track5)
plot(holger@tracksCollection$rides1@tracks$Track6)
plot(holger@tracksCollection$rides1@tracks$Track7)
plot(holger@tracksCollection$rides1@tracks$Track7, y = tr.ele)
plot(holger@tracksCollection$rides1@tracks$Track7, x=time, y=data$tr.ele)
plot(holger@tracksCollection$rides1@tracks$Track7, x=time, y=data)
plot(x = holger@tracksCollection$rides1@tracks$Track7@time, y = holger@tracksCollection$rides1@tracks$Track7@data$tr.ele)
summary(holger@tracksCollection$rides1@tracks$Track3)
summary(holger@tracksCollection$rides1@tracks$Track4)
summary(holger@tracksCollection$rides1@tracks$Track5)
summary(holger@tracksCollection$rides1@tracks$Track6)
summary(holger@tracksCollection$rides1@tracks$Track7)
summary(mark@tracksCollection$rides1@tracks$Track1)
holger@tracksCollection$rides1@tracks$Track7@time[1]
holger@tracksCollection$rides1@tracks$Track7@time[1] - holger@tracksCollection$rides1@tracks$Track7@time[100]
difftime(holger@tracksCollection$rides1@tracks$Track7@time[1], holger@tracksCollection$rides1@tracks$Track7@time[100])
Sys.timezone
Sys.timezone
Sys.timezone(location = TRUE)
difftime(holger@tracksCollection$rides1@tracks$Track7@time[1], holger@tracksCollection$rides1@tracks$Track7@time[100], tz="Europe/Berlin")
holger@tracksCollection$rides1@tracks$Track7@time[1]
a<- holger@tracksCollection$rides1@tracks$Track7@time[1]
class(a)
as.POSIXct(holger@tracksCollection$rides1@tracks$Track7@time[1], "%Y-%m-%dT%H:%M:%SZ")
mark@tracksCollection$rides2@tracks$Track1
summary(mark@tracksCollection$rides2@tracks$Track1)
summary(mark@tracksCollection$rides2@tracks$Track2)
summary(mark@tracksCollection$rides2@tracks$Track1)
summary(mark@tracksCollection$rides2@tracks$Track2)
summary(mark@tracksCollection$rides2@tracks$Track2@sp@bbox)
summary(mark@tracksCollection$rides2@tracks$Track1@sp@bbox)
summary(mark@tracksCollection$rides2@tracks$Track3@sp@bbox)
summary(mark@tracksCollection$rides2@tracks$Track3)
?diff.POSIXct
??diff.POSIXct
diff(holger@tracksCollection$rides1@tracks$Track7@time[1], holger@tracksCollection$rides1@tracks$Track7@time[100])
diff(holger@tracksCollection$rides1@tracks$Track7@time[100], holger@tracksCollection$rides1@tracks$Track7@time[1])
difftime(holger@tracksCollection$rides1@tracks$Track7@time[100], holger@tracksCollection$rides1@tracks$Track7@time[1], tz="Europe/Berlin")
as.difftime(c("0:3:20", "11:23:15"))
as.difftime(c(holger@tracksCollection$rides1@tracks$Track7@time[1], holger@tracksCollection$rides1@tracks$Track7@time[1]))
difftime(holger@tracksCollection$rides1@tracks$Track7@time[100], holger@tracksCollection$rides1@tracks$Track7@time[1], tz="Europe/Berlin")
holger@tracksCollection$rides1@tracks$Track7@time[1]
holger@tracksCollection$rides1@tracks$Track7@time[1,2]
holger@tracksCollection$rides1@tracks$Track7@time[1,2]
holger@tracksCollection$rides1@tracks$Track7@time[1,2]
1 +4
holger@tracksCollection$rides1@tracks$Track7@time[1,2]
holger@tracksCollection$rides1@tracks$Track7@time
holger@tracksCollection$rides1@tracks$Track7@time[,1]
holger@tracksCollection$rides1@tracks$Track7@time[1,]
holger@tracksCollection$rides1@tracks$Track7@time[,1]
class(holger@tracksCollection$rides1@tracks$Track7@time)
class(holger@tracksCollection$rides1@tracks$Track7@time[,2])
class(holger@tracksCollection$rides1@tracks$Track7@time["xts"])
class(holger@tracksCollection$rides1@tracks$Track7@time$zoo)
class(holger@tracksCollection$rides1@tracks$Track7@time$xts)
holger@tracksCollection$rides1@tracks$Track7@time
as.POSIXct(2014-09-20 10:26:18)
as.POSIXct(2014-09-20 10:26:18)
as.POSIXct("2014-09-20 10:26:18")
as.POSIXct("2014-09-20 10:26:22")
difftime(a,b)
difftime(a,b, tz="Europe/Berlin")
difftime(holger@tracksCollection$rides1@tracks$Track7@time[100], holger@tracksCollection$rides1@tracks$Track7@time[1], tz="Europe/Berlin")
a <- as.POSIXct("2014-09-20 10:26:22")
as.Date(as.character(a, format="%Y-%m-%dT%H:%M:%SZ"))
b <- as.POSIXct("2014-09-20 10:36:22")
as.Date(as.character(b, format="%Y-%m-%dT%H:%M:%SZ"))
as.Date(as.character(a, format="%Y-%m-%dT%H:%M:%SZ")) - as.Date(as.character(b, format="%Y-%m-%dT%H:%M:%SZ"))
as.Date(as.character(a, format="%H:%M")) - as.Date(as.character(b, format="%H:%M"))
as.Date(as.character(a, format="%H:%M:%SZ")) - as.Date(as.character(b, format="%H:%M::%SZ"))
holger@tracksCollection$rides1@tracks$Track7@time[1,0]
holger@tracksCollection$rides1@tracks$Track7@time[2,0]
diff(holger@tracksCollection$rides1@tracks$Track7@time[1,0], holger@tracksCollection$rides1@tracks$Track7@time[2,0])
diff(holger@tracksCollection$rides1@tracks$Track7@time[1,0], holger@tracksCollection$rides1@tracks$Track7@time[100,0])
diff(holger@tracksCollection$rides1@tracks$Track7@time[100,0], holger@tracksCollection$rides1@tracks$Track7@time[1,0])
diff(holger@tracksCollection$rides1@tracks$Track7@time[1,0], holger@tracksCollection$rides1@tracks$Track7@time[100,0])
as.date(as.character(holger@tracksCollection$rides1@tracks$Track1@ttime[1,0], format = "%Y-%m-%dT%H:%M:%SZ"))
as.Date(as.character(holger@tracksCollection$rides1@tracks$Track1@ttime[1,0], format = "%Y-%m-%dT%H:%M:%SZ"))
as.Date(as.character(holger@tracksCollection$rides1@tracks$Track1@time[1,0], format = "%Y-%m-%dT%H:%M:%SZ"))
holger@tracksCollection$rides1@tracks$Track1@time[10,0] - holger@tracksCollection$rides1@tracks$Track1@time[1,0]
holger@tracksCollection$rides1@tracks$Track1@time[10,0]
class(holger@tracksCollection$rides1@tracks$Track1@time[10,0])
class(as.POSIxt(holger@tracksCollection$rides1@tracks$Track1@time[10,0])
class(as.POSIxt(holger@tracksCollection$rides1@tracks$Track1@time[10,0]))
class(as.POSIxt(holger@tracksCollection$rides1@tracks$Track1@time[10,0]))
a <- holger@tracksCollection$rides1@tracks$Track1@time[10,0]))
a <- holger@tracksCollection$rides1@tracks$Track1@time[10,0]
class(a) <- POSIct
class(a) <- "POSIxct"
class(a)
a
setwd("~/Studium/Geoinformatik/Master/2. Semester/R/Analysis of Trajectories/02")
require(trajectories)
require(spacetime)
require(maptools)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require(OpenStreetMap)
require(ggplot2)
require (rgdal)
require (maptools)
require(plotKML)
## Holger's Cycle Tracks
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%SZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
as (stidf, "Track")
}
vec <- vector()
ddir <- "dat/gpx-tracks/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
runs <- rides1 <- list ()
for (f in files) {
cat (f, "\n")
tr <- getTr (f)
if (length (grep ("Running", f)) > 0)
{
runs <- c (runs, tr)
}
else
{
rides1 <- c (rides1, tr)
}
}
holger <- TracksCollection(list(rides1=Tracks(rides1)))
plot(holger, col="red")
## Mark's Cycle Tracks
getTr <- function (file) {
tr <- readGPX (file)
tr <- tr$tracks[[1]][[1]]
crs <- CRS ("+proj=longlat")
sp <- SpatialPoints (tr[,1:2], crs)
t <- as.POSIXct(strptime(tr$time, "%Y-%m-%dT%H:%M:%OSZ"))
stidf <- STIDF (sp, t, data.frame (tr$ele))
as (stidf, "Track")
}
ddir <- "dat/gpx-tracks-mp/"
files <- list.files (ddir)
files <- as.character (sapply (files, function (x) paste (ddir, x, sep="")))
rides2 <- list ()
for (f in files) {
cat (f, "\n")
rides2 <- c (rides2, getTr (f))
}
mark <- TracksCollection (list (rides2=Tracks (rides2)))
plot (mark, col="blue", lwd=1)
holger@tracksCollections$rides1@tracks$Track1@time[1,0]
holger@tracksCollection$rides1@tracks$Track1@time[1,0]
difftime(a,b)
class(a)
difftime(a,b)
a <- holger@tracksCollection$rides1@tracks$Track1@time[1,0]
b <- holger@tracksCollection$rides1@tracks$Track1@time[10,0]
class(a)
difftime(a,b)
a
?datea
?date
format(a, "%Y-%m-%dT%H:%M:%SZ")
format(a, "%Y-%m-%dT%H:%M:%SZ")
as.Date(as.character(a, "%Y-%m-%dT%H:%M:%SZ"))
?as.Date
as.Date(as.character(a, format="%Y-%m-%dT%H:%M:%SZ"))
as.Date(a, format="%Y-%m-%dT%H:%M:%SZ")
setwd("~/GitHub/Trajectories/Aggregation of Trajectories")
